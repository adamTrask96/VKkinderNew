from DB.connect import create_connect


"""
Файл для создания нескольких таблиц для получения уникальности пользователя и создание нового пользователя! \n

ЛОГИКА!!!!\n
в базе данных должно быть только уникальные данные!!! Больше ничего!\n

Таблицы:: \n
1) users \n
    Колонки:\n
    1.1 main_user -> Главный пользователь, пользователь, который ищет;\n
    1.2 find_user -> Пользователь, которого нашел main_user. \n
    1.3 likes     -> Нравиться\Не нравиться \n
    Логике:\n
    При поиске, если не указывать кто искал и кого, система может не верно понять поиск, а именно: \n
    1) При поиске людей из одного и того-же города по одним и тем же параметрам, система 1 раз добавит пользователя,\n
    следовательно, какой-то человек, который ищет в боте, не сможет увидеть уже добавленнго пользователя. \n
    2) Так будет проще в дальнейшем производить манипуляции, а именно: \n
        2.2 Можно сократить количество таблиц до минимума, добавив только две колонки: likes, где данные будут 1 или 0 в соответсвии: 
            2.2.1) 1 -> Человек понравился;\n
            2.2.2) 2 -> Человек не понравился. \n

2) find_params\n
    Колонки: \n
    1.1 main_user -> Главый пользователь, по его id мы будем искать данные для поиска PRAMERY KEY!!!!\n
    1.2 sex -> Параметр пола:\n
        1.2.1) 1 -> Женский;\n
        1.2.2) 2 -> Мужской.\n
    1.3 age_from -> Параметр возвроста начиная от.\n
    1.4 age_to -> Параметр возроста заканчивая числом.\n
    1.5 city -> Параметр города. \n
    1.6 relation -> Семейное положение:\n
        1.6.1) 1 -> не женат/не замужем;\n
        1.6.2) 2 -> есть друг/есть подруга;\n
        1.6.3) 3 -> помолвлен/помолвлена;\n
        1.6.4) 4 -> женат/замужем;\n
        1.6.5) 5 -> всё сложно;\n
        1.6.6) 6 -> в активном поиске;\n
        1.6.7) 7 -> влюблён/влюблена;\n
        1.6.8) 8 -> в гражданском браке;\n
        1.6.9) 0 -> не указано.\n
    
"""

# Создание таблицы юзеров
def create_users_table(cursor):
    """
    Функция на создание таблицы пользователей.\n
    ::ВХОДНЫЕ ПАРАМЕТРЫ\n
    cursor -> функциональное обращение к БД\n
    ::ВЫХОДНЫЕ ПАРАМЕТРЫ\n
    Отсутсвуют\n
    """
    cursor.execute("""CREATE TABLE IF NOT EXISTS users (               
                    main_user INT,
                    find_user INT,
                    likes INT
                );""")

# Создание таблицы параметов пользователя     
def create_params_for_find_table(cursor):
    """
    Функция на создание таблицы параметров.\n
    ::ВХОДНЫЕ ПАРАМЕТРЫ\n
    cursor -> функциональное обращение к БД\n
    ::ВЫХОДНЫЕ ПАРАМЕТРЫ\n
    Отсутсвуют\n
    """
    cursor.execute( """CREATE TABLE IF NOT EXISTS find_params (               
                main_user INT PRIMARY KEY,
                sex INT,
                age_from INT,
                age_to INT,
                city TEXT,
                relation INT
             );""")
     
# Главная функция
def main():
    connect_db = create_connect()
    cursor = connect_db.cursor()
    create_params_for_find_table(cursor)
    create_users_table(cursor)
    connect_db.commit()
    connect_db.close()

if __name__ == "__main__":
    main()
    